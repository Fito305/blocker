syntax = "proto3";

option go_package = "github.com/Fito305/blocker/proto";

// Basically how GRPC works is we have this proto file. We have this HandleTransaction, and this is a node. We need to create a listener then we need to create our GRPC server, which will take in a GRPC server itself but also it will take in some kind of implementation of this node. 
service Node {
    rpc Handshake(Version) returns (Version); // We are going to exchange versions. Between servers. It's a kind of handshake. 
    rpc HandleTransaction(Transaction) returns (Ack);
}

message Version {
    string version = 1;
    int32 height = 2; // What's going to happen here, the protocol from our node, before we are going to connect to a node, we first need to send a handshake which is basically called version, handshake. It's basically some kind of a way shake hands. They want to get to know each other. Example, Im node A and I want to connect to node B in our blockchain, what is going to happen is I am going to send a handshake and in this handshake I'm going to call the hanshake rpc method from grpc. And I'm going to send the hanshake strucuture / message and I'm going to specify my version, from node A, B I'm A. This is my current version of the protocol node, his height and someother things. On the other side, the node is going to respond, it's going to say this is version one, his height is less so it can check I'm almost full of connections. he is lower than me so fuck him, it's not an interesting node for me because I'm already full, I'm already on load. He is going to basically, needs to sync with me so no. On the other hand, they could accept it. Then we are going to resend our own version. So I'm node A i'm going to send my handsake to node B. Node B is going to respond with his version, because it could be that node B's height is lower than our hieght. maybe we are above 100 but the server you are connecting to is at block 50 (hieght). That is a bad node for us. Why would you connect with that node. We cannot sync with him. He needs to sync with us. Of course in an ideal scenario everyone can actually sync with each other and be at the height everyone needs to be. But most of the time when you are full you don't want to connect with nodes that are lower than you because they don't provide any benifits. But that is when we are full of connections.  
    string listenAddr = 3;
    repeated string peerList = 4;
}

message Ack { 
// Aquirement, don't need to specify anything it's an empty type. 
}


// If you want ot make a type you call it a message.
// If you want to make a slice / array it's repeaded
// It is important that we have a publickey and a signature, becuase someone is going to sign the block and the publickey belonging to that block is basically the guy that is who publickey belongs to the privatekey that signed that block.
message Block {
    Header header = 1;
    repeated Transaction transactions = 2;
    bytes publicKey = 3;
    bytes signature = 4;
}

message Header {
    int32 version = 1;
    int32 height = 2;
    bytes prevHash = 3;
    bytes rootHash = 4; // merkle root of txs
    int64 timestamp = 5;
}

message TxInput {
    // The previous hash of the transaction containing the output we want to spend.
    bytes prevTxHash = 1;
    // The index of the output of the previous transaction we want to spend.
    uint32 prevOutIndex = 2;
    bytes publicKey = 3;
    bytes signature = 4;

}

message TxOutput {
    uint64 amount = 1;
    bytes address = 2;
}

message Transaction {
    int32 version = 1;
    repeated TxInput inputs =2;
    repeated TxOutput outputs = 3;
}



// NOTE: 
// A Protobuffer - is used for encoding. it is a serialization protocol. 
// You can specify everything in a .proto file and the each language can compile that into a protobuffer format.
// Basically, in the block chain we have blocks. And a block consists out of a header, transaction and some
// other files. And the reason we have a header and a block is because, most of the time we don't want to 
// send everything over to notes, sometimes we only want to send headers for simple verification. And we also 
// do not want to hash the complete block. We only want to hash the header. It's a very common structure. It's 
// used in Bitcoin and a lot of other blockchain protocols. 

// What is the verions? It's the verion of the block. 
// The version of our serialization protocol. 
//It could be that we have some fields right now but later on that we add more fields,
// and people that are reading our blocks can check the headers and the version and
// if the version does not match they can say "we are not compatible with each other"
// and they can find another node that has the correct version.  Communicating the structure / version of 
// our blocks is important. important for backwards compatibility. The `height` of the block is basically,
// for example, if you have 10 blocks you are going to have a hieght of 10. bitcoin does not use the height. 
// It's basically, an ID but its the height or the index of the block.
// The previous hash of the block, of the preious block, is a chain because we are going to these hashes 
// and we are going to link them together. That is the core semantics of the blockchain. 
// The rootHash is going to be the root of our merkle tree of our transactions.
// timestamp is the time of when the block is created. 

// We need a way to compile this file, so we will add it in the Makefile. The proto/*.proto means
// that everything in the proto directory will be compiled.

// The UTXO transaction model in blockchain. The bitcoin blockchain uses UTXO model.
// A transaction is going to exist out of inputs and outputs. PrevTxHash is the hash of the previous transaction.
// The PrevOutIndex is actually the bigest index of the output of the that transaction. That we want to spend.

// The problem is that ht emoment we are going to sign a transaction we don't have a signature.
// TxInput. Because we are going to sign it to get our signature.


// NOTE: service Node {}, because in a GRPC enviroment you have this RPC protocol, but we need to have some kind of 
// boradcasting mechanism because if somebody is sending a transaction we need to boradcast that transaction to all
// all known nodes / servers, in the network. And we need to do some extra stuff to make it work.
